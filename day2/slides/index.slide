Functions, error handling, panic and recovery
Week 1, day 2

*Serhii*Herasymov*
_(updated_by_Oleksandr_Reuta)_
SoftServe
sgeras@softserveinc.com





* Functions

* Function definition

A function is an independent section of code that maps zero or more input parameters to zero or more output parameters:

.image ./function.png

Go functions schematics:

.image ./function-scheme.png

Function must be defined outside the other functions - at the top level!


* Functions - multiple values

Go is also capable of returning multiple values from a function:

    func f() (int, int) {
        return 5, 6
    }

    func main() {
        x, y := f()
    }

Multiple values are often used to return an error value along with the result:

    x, err := f()

    x, ok := f() // `ok` is a boolean to indicate subroutine success


* Variadic functions

There is a special form available for the last parameter in a Go function:

    func add(args ...int) int {
        total := 0
        for _, v := range args {
            total += v
        }
        return total
    }

    func main() {
        fmt.Println(add(1,2,3))
    }

[...] indicates that function takes zero or more of those parameters.
BTW, this is good way to work with "optional" parameters.



* Functional programming

* Code as a Data

In Go (like Haskell, Python, JavaScript) a function is a first class object.
That means it could be created, stored, passed around as a piece of data.
We *can*not*define* a function _inside_ other function, but we *can*create* it as a value:

    func main() {
      func sum(a, b int) int { return a + b }   // Compilation ERROR
      println( sum(2, 5) )
    }
	
    func main() {
      sum := func (a, b int) int { return a + b }   // OK
      println( sum(2, 5) )                          // fmt.Printf("%T", sum) prints a type of "sum"
    }


* Functions could be passed around

You can return function as a result of other functions:

    func curriedAdd (a int) func (int) int {     // use curriedAdd(2)(3) to call it
    	return func(b int) int {
    		return a + b
    	}
    }
   

or pass it as an argument to other functions:

    func calculateAndPrint(a int, f func(int)int) {
        fmt.Printf("Nicely printed result: %d\n", f(a))
    }

or combine these two cases:

    calculateAndPrint(3, curriedAdd(2))


* Functions could be stored as data (1/2)

Traditional *switch*-desicion:

    func doAction(operator rune, a, b int) (result int, ok bool) {
        ok = true
        switch(operator) {
          case '+': result = a + b;
          case '-': result = a - b;
          case '*': result = a * b;
          default: ok = false;
        }
        return
    }

NOTE:

- `operator`, `a`, `b`, `result`, `ok` plays as pure local variables defined via `var`
- Last return is required. It is an error not to place it here

* Functions could be stored as data (2/2)

Alternative *dictionary*-implementation

    func add(a, b int) int { return a + b }
    func sub(a, b int) int { return a - b }
    func mul(a, b int) int { return a * b }

    var action = map[rune]func(int,int)int {
        '+': add,
        '-': sub,
        '*': mul,
    }

    func doAction(operator rune, a, b int) (result int, ok bool) {
        if f, ok := action[operator]; ok {
            return f(a, b), ok
        }
        return
    }


* Recursion

Function is able to call itself:

    func factorial(x uint) uint {
        if x == 0 {
            return 1
        }
        return x * factorial(x-1)
    }

.image ./recursion.gif


* Decorator

Decorator adds new functionality to an existing object without altering its structure.
It builds a new function with additional features using an existing one.

General pattern:

    func basic(int) int {
        ... //basic functionality
    }

    func decorator(f func(int)int) func(int)int {
        return func(a int) int {
            ... // before-code
            f(a)
            ... // after-code
            return ...
        }
    }

Usage:

    newFunc := decorator(basic)
    result := newFunc(a)                   or just           result := decorator(basic)(a)


* Closure

A closure is a function that retains the same _environment_ as the one it had when it was created.
It looks like the function defined in the closure *remembers* the _environment_ in which it was created.

.link https://tour.golang.org/moretypes/25 Example on "A Tour of Go"

.link http://keshavabharadwaj.com/2016/03/31/closure_golang/ A More Detailed Examples


* Defer, Panic & Recover

* Defer

Go has a special statement called defer which schedules a function call to be run after the function completes:

    func first()  { println("1st") }
    func second() { println("2nd") }

    func main() {
        defer second()
        first()
    }

defer is often used when resources need to be freed in some way:

    f, _ := os.Open(filename)
    defer f.Close()

_NB:_ deferred functions are run even if a run-time panic occurs

* Panic and recover

panic() which causes a run-time error:

    func average(xs []float64) float64 {
        panic("Not Implemented")
    }

recover() stops this Drama Queen and returns the value that was passed to the call to panic():

    func main() {
        defer func() {
            str := recover()
            println(str)
        }()
        panic("AAAAA, we gonna dye")
    }




* Error handling

* Errors

Errors are values (!). Values can be programmed, and since errors are values, errors can be programmed.

The error type is an interface type. An error variable represents any value that can describe itself as a string.
Error interface's declaration:

    type error interface {
        Error() string
    }

Here's how you might use errors.New():

    func Sqrt(f float64) (float64, error) {
        if f < 0 {
            return 0, errors.New("math: square root of negative number")
        }
        // ... implementation
    }

* Error handling

In Go, error handling is important.
Basic example:

    user, err := getUsers()
    if err != nil {
        println("something happened")
    }

or

    if user, err := getUsers(); err != nil {
        println("something happened")
    } else {
        doSomethingWith(user)
    }

* Simplifying repetitive error handling

.html error-handling-simplification.html




* Live coding: Quick Sort

* Quick Sort

.html ./quick-sort.html