Pointers, methods and interfaces
Week 1, day 3

*Serhii*Herasymov*
(updated by Oleksandr Reuta)
SoftServe
sgeras@softserveinc.com




* Pointers

* Basics

Passing by _reference_ means the called functions' parameter will be the same as the callers' passed argument
(not the value, but the identity - the variable itself).

Passing by _value_ means the called functions' parameter will be a copy of the callers' passed argument.

.image ./pass-scheme.gif

* Pointers in Go

Pointer rules:

- A _variable_ is a piece of storage, containing a value.
- A _pointer_ value is a _address_ of the variable.
- Not every value has an address, but every variable does.
- With a pointer we can read or update the value of a variable _indirectly_, without using or even knowing the name of the variable.

Pointer declaration and usage:

    var x = 1
    p := &x        // p, of type *int, points to x
    println(*p)    // => 1
    *p = 2         // same as x = 2
    println(*p)    // => 2

* Pointers in Go

.html ./star-and-amp-mnemonic.html

* New

Another way to get a pointer is to use the built-in _new()_ function:

    func one (xPtr *int) {
        *xPtr = 1
    }

    func main () {
        xPtr := new(int)
        one(xPtr)
        fmt.Println(*xPtr) // x is 1
    }

_new()_ takes a type as an argument, allocates enough memory to fit a value of that type and returns a pointer to it.


* Object oriented programming


* Objects

*Objects* are language constructs that have _state_ and _behavior_ that operates on the state and selectively exposes it to other parts of the program. 

A struct defines state.

    type Creature struct {
        Name string
        Real bool
    }

A member function (method) defines some behavior

    func (c Creature) String() {
        fmt.Printf("Name: '%s', Real: %t\n", c.Name, c.Real)
    }


* Methods

Method schematics:

.image ./method-scheme.png

Example method declaration:

    func (rect Rectangle) Area () int {
        return rect.Height * rect.Width
    }

* Methods with a pointer receiver

If method needs to update a variable we must pass address of the variable using a pointer.

Same goes if for methods that need to update the receiver variable:

    func (rect *Rectangle) ScaleBy (factor int) {
        rect.Width  *= factor
        rect.Height *= factor
    }

    rect := Rectangle{100, 200}
    rect.ScaleBy(3) // => 600


* Embedding

You can embed anonymous types inside each other. If you embed a nameless struct then the embedded struct provides its state (and methods) to the embedding struct directly. For example, the FlyingCreature has a nameless `Creature` struct embedded in it, which means a `FlyingCreature` *is*a* `Creature`.

    type FlyingCreature struct {
        Creature
        WingSpan int
    }

Now, if you have an instance of a `FlyingCreature`, you can access its `Name` and `Real` attributes directly.

    dragon := &FlyingCreature{ Creature{"Dragon", false}, 15 }
    fmt.Println(dragon.Name)
    fmt.Println(dragon.Real)
    fmt.Println(dragon.WingSpan)

* Encapsulation

Go encapsulates things at the *package* level.

Names that start with a lowercase letter are only visible within that package.

You can hide anything in a private package and just expose specific types, interfaces, and factory functions.

    type foo struct {}

    func (f foo) Foo1() {
        fmt.Println("Foo1() here")
    }

    func (f foo) Foo2() {
        fmt.Println("Foo2() here")
    }
    
    func NewFoo() Fooer {
        return &Foo{}
    }


* Inheritance


Modern languages and object-oriented thinking now favor composition over inheritance.

For all intents and purposes, composition by embedding an anonymous type is equivalent to implementation inheritance.

You can also embed an interface. (It can even lead to a runtime error that is not discovered at compile time if the embedding type doesn't implement all the interface methods.)


* Polymorphism

Polymorphism is an ability to treat objects of different types uniformly as long as they adhere to the same interface (behavior).

Go interfaces provide this capability in a very direct and intuitive way. 

    type Human interface {
        Likes() string
    }
    type Man struct {}
    func (m Man) Likes() string {
        return "fishing"
    }
    type Woman struct {}
    func (m Woman) Likes() string {
        return "shopping"
    }
    func main() {
        m, w := new(Man), new(Woman)
        hArr := [...]Human{m, w} //an array of Humans - we donâ€™t know whether Man or Woman
        for n, _ := range (hArr) {
            fmt.Println("I'm a human and I like ", hArr[n].Likes())   //behavior changes depending on actual instance
        }
    }


* Interfaces

* Interfaces

Interface rules:

- _Interface_ define behavior that a type must implement (and expose).
- An _interface_ _type_ is defined as a set of method signatures.
- A value of interface type can hold any value that implements those methods.

* Interfaces

Interface usage:

    type Shape interface {
        Area() int          // Rectangle already has this method, so we can operate
    }                       // with Rectangle as we do with Shape

    func totalAreas(shapes ...Shape) int {
        var area int
        for _, s := range shapes {
            area += s.Area()
        }
        return area
    }

    func main() {
    	a := Rectangle{100, 200}
    	b := Rectangle{50,  60}
    	c := Rectangle{20,  10}

    	println(totalAreas(a, b, c))
    }

* Sort interface

    type Person struct {
    	Name string
    	Age  int
    }

    type ByAge []Person    // ByAge implements sort.Interface for []Person based on the Age field.

    func (a ByAge) Len() int           { return len(a) }
    func (a ByAge) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }
    func (a ByAge) Less(i, j int) bool { return a[i].Age < a[j].Age }

    func main () {
        people := []Person{
            {"Bob",     31},
            {"John",    42},
            {"Michael", 17},
            {"Jenny",   26},
        }

        sort.Sort(ByAge(people))
    }





* interface{} and type assertion

An interface{} type is a type that could be _any_ _value_ (literally):

    var anything     interface{} = "string"
    var moreAnything interface{} = 123

So you can create a function that can accept any type, custom or internal.

To use such values you must use a _type_ _assertion_:

    func captainObvious (v interface{}) {
        switch v := anything.(type) {
            case string:
                println("string")
            case int32, int64:
                println("integer")
            case SomeCustomType:
                println("some-custom-type")
            default:
                println("unknown")
        }
    }

* Type assertion

_Type_assertion_ is an operation applied to an interface value. It looks like this:

*x.(T)*

where:
- x - is an expression of an interface type
- T - is a type, called the "asserted" type

A type assertion checks that the dynamic type of it's operand matches the asserted type.

* Ad-hock polymorphism

Simple example:

    if _, ok := x.(int); ok {
        //
    } else if _, ok := x.(uint); ok {
        //
    }

But we can do better:

A _switch_ statement simplifies an `if-else` chain that performs a series of value equality tests. An analogous _type_switch_ statement simplifies an `if-else` chain of type assertions:

    switch x.(type) {
    case nil:        // ...
    case int, uint:  // ...
    case bool:       // ...
    case string:     // ...
    default:         // ...
    }


* Type conversions (casting)

Type casting allows programmers to change an entity from one data type into another. If you need to take advantage
of certain characteristics of data type hierarchies, then you have to change entities from one data type into another.

Use *T(v)* for type casting:

    var amount int = 42
    var amount2 float64 = float64 (amount)
    var amount3 uint = uint (f)

or more simply:

    amount := 42
    amount2 := float64(amount)
    amount3 := uint (f)

* Type conversions (casting)

A non-constant value *x* can be converted to type *T* in any of these cases:

- x is assignable to T.
- x 's type and T have identical underlying types.
- x 's type and T are unnamed pointer types and their pointer base types have identical underlying types.
- x's type and T are both integer or floating point types.
- x's type and T are both complex types.
- x is an integer or a slice of bytes or runes and T is a string type.
- x is a string and T is a slice of bytes or runes.

* Conclusion

Go is a bona fide object-oriented programming language. It enables object-based modeling and promotes the best practice of using interfaces instead of concrete type hierarchies. Go made some unusual syntactic choices, but overall working with types, methods, and interfaces feels simple, lightweight, and natural. 

Embedding is not very pure, but apparently pragmatism was at work, and embedding was provided instead of only composition by name.